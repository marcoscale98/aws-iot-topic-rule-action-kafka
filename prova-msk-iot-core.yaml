AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Stack per VPC + MSK Standard + AWS IoT Rule → MSK
# https://eu-central-1.console.aws.amazon.com/cloudformation/home?region=eu-central-1#/stacks/quickcreate?templateURL=https%3A%2F%2Fs3.eu-central-1.amazonaws.com%2Fcf-templates-nk08d0q6r1yx-eu-central-1%2F2025-05-26T144807.674Zi7e-prova-msk-iot-core.yaml&stackName=prova-msk3&param_BrokerCount=2&param_IotKafkaTopicName=iot-data-topic&param_KafkaVersion=3.6.0&param_VpcCidr=12.0.0.0%2F16&param_IotRuleSql=SELECT%20*%20FROM%20'sensor%2F%2B%2Fdata'&param_ClusterName=ProvaIoTMSKCluster2&param_BrokerEBSVolumeSize=100&param_BrokerInstanceType=kafka.m5.large&param_Subnet2Cidr=12.0.1.0%2F24&param_Subnet1Cidr=12.0.0.0%2F24&param_IotRuleName=ProvaIoTToMSKRule2
Parameters:
  VpcCidr:
    Type: String
    Default: 11.0.0.0/16
    Description: CIDR block per la VPC

  Subnet1Cidr:
    Type: String
    Default: 11.0.0.0/24
    Description: CIDR per subnet AZ1

  Subnet2Cidr:
    Type: String
    Default: 11.0.1.0/24
    Description: CIDR per subnet AZ2

  ClusterName:
    Type: String
    Default: ProvaIoTMSKCluster
    Description: Nome del cluster MSK standard

  KafkaVersion:
    Type: String
    Default: '3.6.0'
    Description: Versione di Apache Kafka

  BrokerInstanceType:
    Type: String
    Default: kafka.m5.large
    Description: Tipo di istanza per i broker MSK

  BrokerCount:
    Type: Number
    Default: 2
    Description: Numero di broker nel cluster (uno per subnet/AZ)

  BrokerEBSVolumeSize:
    Type: Number
    Default: 100
    Description: Dimensione del volume EBS (GB) per broker

  IotRuleName:
    Type: String
    Default: ProvaIoTToMSKRule
    Description: Nome della Topic Rule AWS IoT

  IotRuleSql:
    Type: String
    Default: "SELECT * FROM 'sensor/+/data'"
    Description: SQL per la Topic Rule

  IotKafkaTopicName:
    Type: String
    Default: iot-data-topic
    Description: Nome del topic Kafka

Resources:
  ## VPC e Subnet
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']

  MSKSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Accesso MSK interno
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: !Ref VpcCidr

  ## Cluster MSK Standard
  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      KafkaVersion: !Ref KafkaVersion
      NumberOfBrokerNodes: !Ref BrokerCount
      BrokerNodeGroupInfo:
        InstanceType: !Ref BrokerInstanceType
        ClientSubnets:
          - !Ref SubnetA
          - !Ref SubnetB
        SecurityGroups:
          - !Ref MSKSecurityGroup
        StorageInfo:
            EBSStorageInfo:
              VolumeSize: !Ref BrokerEBSVolumeSize
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS
          InCluster: true

  ## Ruolo per ENI di AWS IoT Core (TopicRuleDestination)
  IoTVpcDestRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${IotRuleName}-VpcDestRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ENIManagePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                Resource: '*'

  ## Destination VPC per AWS IoT → MSK
  TopicRuleDestination:
    Type: AWS::IoT::TopicRuleDestination
    Properties:
      Status: ENABLED
      VpcProperties:
        RoleArn: !GetAtt IoTVpcDestRole.Arn
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
        SecurityGroups:
          - !Ref MSKSecurityGroup
        VpcId: !Ref VPC

  ## Ruolo per AWS IoT Rule Kafka Action
  IoTKafkaActionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${IotRuleName}-KafkaActionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MSKWritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kafka-cluster:Connect
                  - kafka-cluster:WriteData
                  - kafka-cluster:DescribeCluster
                Resource: !Sub arn:${AWS::Partition}:kafka:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}/*

  ## AWS IoT Topic Rule
  IoTTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Ref IotRuleName
      TopicRulePayload:
        RuleDisabled: false
        Sql: !Ref IotRuleSql
        AwsIotSqlVersion: "2016-03-23"
        Actions:
          - Kafka:
              DestinationArn: !GetAtt TopicRuleDestination.Arn
              Topic: !Ref IotKafkaTopicName
              ClientProperties:
                acks: "all"
              Headers: []
        RoleArn: !GetAtt IoTKafkaActionRole.Arn

Outputs:
  MSKClusterArn:
    Description: Arn del cluster MSK standard
    Value: !GetAtt MSKCluster.Arn

  IoTTopicRuleArn:
    Description: Arn della IoT Topic Rule
    Value: !GetAtt IoTTopicRule.Arn